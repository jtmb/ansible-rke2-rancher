---
- name: Create cert-manager directory
  ansible.builtin.file:
    path: "{{ cert_manager_path }}"
    mode: '755'  # Set directory permissions
    state: directory  # Ensure the directory exists

- name: Generate CA key and certificate on the master node
  ansible.builtin.shell: |
    openssl req -x509 -nodes -days 3650 -newkey rsa:2048 \
      -keyout "{{ cert_manager_path }}/ca.key" -out "{{ cert_manager_path }}/ca.crt" \
      -subj "/CN=my-ca"
  args:
    creates: "{{ cert_manager_path }}/ca.key"  # Prevents re-running if already exists

- name: Generate TLS key and certificate on the master node
  ansible.builtin.shell: |
    openssl req -new -newkey rsa:2048 -nodes -keyout "{{ cert_manager_path }}/tls.key" -out "{{ cert_manager_path }}/tls.csr" -subj "/CN=rancher.{{ hostname }}"
    openssl x509 -req -in "{{ cert_manager_path }}/tls.csr" -CA "{{ cert_manager_path }}/ca.crt" -CAkey "{{ cert_manager_path }}/ca.key" -CAcreateserial -out "{{ cert_manager_path }}/tls.crt" -days 365
  args:
    creates: "{{ cert_manager_path }}/tls.key"  # Prevents re-running if already exists

- name: Ensure ca.crt and ca.key are owned by adminuser
  ansible.builtin.file:
    path: "{{ cert_manager_path }}/ca.crt"
    owner: adminuser
    group: adminuser
    mode: '0644'

- name: Ensure ca.crt and ca.key are owned by adminuser
  ansible.builtin.file:
    path: "{{ cert_manager_path }}/ca.key"
    owner: adminuser
    group: adminuser
    mode: '0644'

- name: Ensure tls.crt and tls.key are owned by adminuser
  ansible.builtin.file:
    path: "{{ cert_manager_path }}/tls.crt"
    owner: adminuser
    group: adminuser
    mode: '0644'

- name: Ensure tls.crt and tls.key are owned by adminuser
  ansible.builtin.file:
    path: "{{ cert_manager_path }}/tls.key"
    owner: adminuser
    group: adminuser
    mode: '0644'

- name: Copy ca.crt to control machine
  ansible.builtin.fetch:
    src: "{{ cert_manager_path }}/ca.crt"
    dest: "/tmp/ca.crt"
    flat: yes

- name: Copy ca.key to control machine
  ansible.builtin.fetch:
    src: "{{ cert_manager_path }}/ca.key"
    dest: "/tmp/ca.key"
    flat: yes

- name: Copy tls.crt to control machine
  ansible.builtin.fetch:
    src: "{{ cert_manager_path }}/tls.crt"
    dest: "/tmp/tls.crt"
    flat: yes

- name: Copy tls.key to control machine
  ansible.builtin.fetch:
    src: "{{ cert_manager_path }}/tls.key"
    dest: "/tmp/tls.key"
    flat: yes

- name: Create cattle-system namespace
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: cattle-system
  environment:
    KUBECONFIG: "{{ kubectl_config }}"  # Use the kubectl config environment variable

- name: Create tls-rancher-ingress secret
  kubernetes.core.k8s:
    state: present
    definition:
      api_version: v1
      kind: Secret
      metadata:
        name: tls-rancher-ingress
        namespace: cattle-system
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ lookup('file', '/tmp/tls.crt') | b64encode }}"
        tls.key: "{{ lookup('file', '/tmp/tls.key') | b64encode }}"
  environment:
    KUBECONFIG: "{{ kubectl_config }}"  # Use the kubectl config environment variable

- name: Create tls-ca secret
  kubernetes.core.k8s:
    state: present
    definition:
      api_version: v1
      kind: Secret
      metadata:
        name: tls-ca
        namespace: cattle-system
      data:
        ca.crt: "{{ lookup('file', '/tmp/ca.crt') | b64encode }}"
environment:
  KUBECONFIG: "{{ kubectl_config }}"  # Use the kubectl config environment variable


